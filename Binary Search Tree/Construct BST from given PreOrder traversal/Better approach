#include <bits/stdc++.h>
#include <algorithm> // For sort

using namespace std;

// We have to construct a BST from given PreOrder traversal

// T.C. -> O(N logN)
// S.C. -> O(N)

struct Node
{
    int data;    // dataue
    Node *l, *r; // left and right child

    // parameterized constructor
    Node(int data)
    {
        this->data = data;
        l = r = nullptr;
    }
};

Node *helper(vector<int> &preorder, int preStart, int preEnd, vector<int> &inorder, int inStart, int inEnd, map<int, int> &inMap)
{
    if (preStart > preEnd || inStart > inEnd)
    {
        return nullptr;
    }

    Node *root = new Node(preorder[preStart]);
    int inRoot = inMap[root->data];

    // Nodes in left subtree
    int numsLeft = inRoot - inStart;

    // Recursively build the left subtree
    root->l = helper(preorder, preStart + 1, preStart + numsLeft, inorder, inStart, inRoot - 1, inMap);

    // Recursively build the right subtree
    root->r = helper(preorder, preStart + numsLeft + 1, preEnd, inorder, inRoot + 1, inEnd, inMap);

    // Return the current root node
    return root;
}

Node *buildTree(vector<int> &preorder, vector<int> &inorder)
{
    map<int, int> inMap;

    for (int i = 0; i < inorder.size(); i++)
    {
        inMap[inorder[i]] = i;
    }

    return helper(preorder, 0, preorder.size() - 1, inorder, 0, inorder.size() - 1, inMap);
}

void printInorder(Node *root)
{
    if (!root)
    {
        return;
    }
    printInorder(root->l);
    cout << root->data << " ";
    printInorder(root->r);
}

void printVector(const vector<int> &vec)
{
    for (int val : vec)
    {
        cout << val << " ";
    }
    cout << endl;
}

int main()
{
    int n;
    cout << "Enter the number of nodes -> " << endl;
    cin >> n;

    vector<int> preorder(n);
    vector<int> inorder(n);

    cout << "Enter the Preorder traversal sequence -> " << endl;
    for (int i = 0; i < n; ++i)
    {
        cin >> preorder[i];
    }

    inorder = preorder;
    sort(inorder.begin(), inorder.end());

    cout << "Inorder Traversal -> ";
    printVector(inorder);

    cout << "Preorder Traversal -> ";
    printVector(preorder);

    Node *root = buildTree(preorder, inorder);

    cout << "Inorder of Unique Binary Tree Created -> " << endl;
    printInorder(root);
    cout << endl;

    return 0;
}
