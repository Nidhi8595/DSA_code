#include <bits/stdc++.h>

using namespace std;

// We have to construct a BST from given PreOrder traversal

// Optimal approach -> using upper bound at each step

// T.C. -> O(3N)
// S.C. -> O(1)

struct Node
{
    int data;    // data value
    Node *l, *r; // left and right child

    // parameterized constructor
    Node(int data)
    {
        this->data = data;
        l = r = nullptr;
    }
};

Node *helper(vector<int> preorder, int &i, int bound)
{
    if (i == preorder.size() || preorder[i] > bound)
    {
        return nullptr;
    }

    Node *root = new Node(preorder[i++]);

    root->l = helper(preorder, i, root->data);
    root->r = helper(preorder, i, bound);

    return root;
}

Node *buildTree(vector<int> preorder)
{
    int i = 0;
    return helper(preorder, i, INT_MAX);
}

void printInorder(Node *root)
{
    if (!root)
    {
        return;
    }
    printInorder(root->l);
    cout << root->data << " ";
    printInorder(root->r);
}

void printVector(const vector<int> &vec)
{
    for (int val : vec)
    {
        cout << val << " ";
    }
    cout << endl;
}

int main()
{
    int n;
    cout << "Enter the number of nodes -> " << endl;
    cin >> n;

    vector<int> preorder(n);

    cout << "Enter the Preorder traversal sequence -> " << endl;
    for (int i = 0; i < n; ++i)
    {
        cin >> preorder[i];
    }

    cout << "Preorder Traversal -> ";
    printVector(preorder);

    Node *root = buildTree(preorder);

    cout << "Inorder of Unique Binary Tree Created -> " << endl;
    printInorder(root);
    cout << endl;

    return 0;
}
