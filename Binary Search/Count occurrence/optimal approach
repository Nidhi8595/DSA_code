#include <bits/stdc++.h>
using namespace std;
// using binary search approach
int firstOc(int arr[], int n, int k)
{
    int low = 0, high = n - 1;
    int f = -1;
    while (low <= high)
    {
        int mid = (low + high) / 2;
        if (arr[mid] == k)
        {
            f = mid;
            // look for smaller index on the left
            high = mid - 1;
        }
        else if (arr[mid] < k)
        {
            low = mid + 1; // look on the right
        }
        else
        {
            high = mid - 1; // look on the left
        }
    }
    return f;
}
int lastOc(int arr[], int n, int k)
{
    int low = 0, high = n - 1;
    int l = -1;
    while (low <= high)
    {
        int mid = (low + high) / 2;
        if (arr[mid] == k)
        {
            l = mid;
            // look for larger index on the right
            low = mid + 1;
        }
        else if (arr[mid] < k)
        {
            low = mid + 1; // look on the right
        }
        else
        {
            high = mid - 1; // look on the left
        }
    }
    return l;
}
pair<int, int> firstAndLastPosition(int arr[], int n, int k)
{
    int f = firstOc(arr, n, k);
    if (f == -1)
    {
        return {-1, -1}; // if the first occurence isn't found then last will be -1 as well
    }
    int l = lastOc(arr, n, k);
    return {f, l};
}
int count(int arr[], int n, int x)
{
    pair<int, int> ans = firstAndLastPosition(arr, n, x);
    if (ans.first == -1)
    {
        return 0;
    }
    return (ans.second - ans.first + 1);
}
int main()
{
    int n, t;
    cout << "Enter the size of array -> ";
    cin >> n;
    int arr[n];
    cout << "Enter the elements of the array / sorted order -> ";
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }
    cout << "Enter the target -> ";
    cin >> t;
    int ans = count(arr, n, t);
    cout << "The number of occurrences of " << t << " is -> " << ans;
    return 0;
}
