#include <bits/stdc++.h>
using namespace std;
// using lower and upper bound
int upperBound(int arr[], int n, int x)
{
    int low = 0, high = n - 1;
    int ans = n;
    while (low <= high)
    {
        int mid = (low + high) / 2;
        if (arr[mid] > x)
        {
            ans = mid;
            high = mid - 1; // check in the left subarray
        }
        else
        {
            low = mid + 1; // chech in the right
        }
    }
    return ans;
}
int lowerBound(int arr[], int n, int x)
{
    int low = 0, high = n - 1;
    int ans = n;
    while (low <= high)
    {
        int mid = (low + high) / 2;
        if (arr[mid] >= x)
        {
            ans = mid;
            high = mid - 1; // check in the left subarray
        }
        else
        {
            low = mid + 1; // chech in the right
        }
    }
    return ans;
}
pair<int, int> firstAndLastPosition(int arr[], int n, int k)
{
    int lb = lowerBound(arr, n, k);
    if (lb == n || arr[lb] != k) // index crossed or first occurrence isn't found
    {
        return {-1, -1};
    }
    int ub = upperBound(arr, n, k);
    return {lb, ub - 1};
}
int main()
{
    int n, t;
    cout << "Enter the size of array -> ";
    cin >> n;
    int arr[n];
    cout << "Enter the elements of the array / sorted order -> ";
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }
    cout << "Enter the target -> ";
    cin >> t;
    pair<int, int> ans = firstAndLastPosition(arr, n, t);
    cout << "The first and last occurences are -> " << ans.first << " and " << ans.second << endl;
    return 0;
}
