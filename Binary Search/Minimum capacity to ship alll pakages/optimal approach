#include <bits/stdc++.h>
using namespace std;
// optimal approach
int findDays(int n, int arr[], int cap)
{
    int days = 1; // First day.
    int load = 0;
    for (int i = 0; i < n; i++)
    {
        if (load + arr[i] > cap)
        {
            days += 1;     // move to next day
            load = arr[i]; // load the weight.
        }
        else
        {
            // the same day.
            load += arr[i];
        }
    }
    return days;
}
int leastCapacity(/* vector<int> &arr*/ int n, int arr[], int d)
{
    // Find the maximum and the summation:
    //  int maxi = *max_element(arr.begin(),arr.end());
    int *m = max_element(arr, arr + n);
    int l = *m;
    // int sum = accumulate(arr.begin(), arr.end(), 0);
    int h = accumulate(arr, arr + n, 0);
    while (l <= h)
    {
        int mid = (l + h) / 2;
        int noOfD = findDays(n, arr, mid);
        if (noOfD <= d)
        {
            h = mid - 1;
        }
        else
        {
            l = mid + 1;
        }
    }
    return l;
}
int main()
{
    // vector<int> arr = {5, 4, 5, 2, 3, 4, 5, 6};
    // int d = 5;
    int n, d;
    cout << "Enter the size of array -> ";
    cin >> n;
    int arr[n];
    cout << "Enter the elements of the array -> ";
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }
    cout << "Enter the target -> ";
    cin >> d;
    int ans = leastCapacity(n, arr, d);
    cout << "The minimum capacity should be -> " << ans;
    return 0;
}
