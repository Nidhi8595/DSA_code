#include <bits/stdc++.h>
using namespace std;
// optimal approach 2
int findM(int n, int arr[])
{
    int low = 0, high = n - 1;
    int m = INT_MAX;
    while (low <= high)
    {
        int mid = (low + high) / 2;
        if (arr[low] <= arr[high]) // in this case we are also checking the case when both the parts of remaining half are sorted
        {
            m = min(m, arr[low]);
            break;
        }
        if (arr[low] <= arr[mid])
        {
            m = min(m, arr[low]);
            low = mid + 1;
        }
        else
        {
            m = min(m, arr[mid]);
            high = mid - 1;
        }
    }
    return m;
}
int main()
{
    int n;
    cout << "Enter the size of array -> ";
    cin >> n;
    int arr[n];
    cout << "Enter the elements of the array / sorted order / rotated -> ";
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }
    int ans = findM(n, arr);
    cout << "The minimum element is -> " << ans;
    return 0;
}
