#include <bits/stdc++.h>
using namespace std;
// optimal approach
bool search(int n, int arr[], int t)
{
    int l = 0, h = n - 1;
    while (l <= h)
    {
        int mid = (l + h) / 2;
        if (arr[mid] == t) // element at middle position
        {
            return true;
        }
        // Edge case:
        if (arr[l] == arr[mid] && arr[mid] == arr[h])
        {
            l = l + 1;
            h = h - 1;
            continue;  // next iteration since in this case the same duplicated value is present at low, mid and high
        }
        if (arr[l] <= arr[mid])
        {
            if (arr[l] <= t && t <= arr[mid])
            {
                h = mid - 1;
            }
            else
            {
                l = mid + 1;
            }
        }
        else
        {
            if (arr[mid] <= t && t <= arr[h])
            {
                l = mid + 1;
            }
            else
            {
                h = mid - 1;
            }
        }
    }
    return false;
}
int main()
{
    int n, t;
    cout << "Enter the size of array -> ";
    cin >> n;
    int arr[n];
    cout << "Enter the elements of the array / sorted and rotated about a pivot / contain duplicates -> ";
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }
    cout << "Enter the target -> ";
    cin >> t;
    bool ans = search(n, arr, t);
    if (!ans)
    {
        cout << "Target is not present in the array";
    }
    else
    {
        cout << "Target is present in the array";
    }
    return 0;
}
