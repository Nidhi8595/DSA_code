#include <bits/stdc++.h>
using namespace std;
// optimal approach
int search(int n, int arr[], int t)
{
    int l = 0, h = n - 1;
    while (l <= h)
    {
        int mid = (l + h) / 2;
        if (arr[mid] == t)  // element at middle position
        {
            return mid;
        }
        if (arr[l] <= arr[mid])  
        {
            if (arr[l] <= t && t <= arr[mid]) // target present in left half
            {
                h = mid - 1;
            }
            else
            {
                l = mid + 1;
            }
        }
        else
        {
            if (arr[mid] <= t && t <= arr[h]) // target present in right half
            {
                l = mid + 1;
            }
            else
            {
                h = mid - 1;
            }
        }
    }
    return -1;
}
int main()
{
    int n, t;
    cout << "Enter the size of array -> ";
    cin >> n;
    int arr[n];
    cout << "Enter the elements of the array / sprted and rotated about a pivot -> ";
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }
    cout << "Enter the target -> ";
    cin >> t;
    int ans = search(n, arr, t);
    if (ans == -1)
    {
        cout << "Target is not present";
    }
    else
    {
        cout << t << " is present at the index -> " << ans;
    }
    return 0;
}
