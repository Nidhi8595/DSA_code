#include <bits/stdc++.h>
using namespace std;
// optimal approach
int sumByD(int n, int arr[], int div)
{
    int sum = 0;
    for (int i = 0; i < n; i++)
    {
        sum += ceil((double)(arr[i]) / (double)(div));
    }
    return sum;
}
int smallestDivisor(int n, int arr[], int limit)
{
    if (n > limit)
    {
        return -1;
    }
    int *m = max_element(arr, arr + n);
    int l = 1, h = *m;
    while (l <= h)
    {
        int mid = (l + h) / 2;
        if (sumByD(n, arr, mid) <= limit)
        {
            h = mid - 1;
        }
        else
        {
            l = mid + 1;
        }
    }
    return l;
}
int main()
{
    int a, n, limit;
    cout << "Enter size of array-> ";
    cin >> n;
    int arr[n];
    cout << "Enter elements->" << endl;
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }
    cout << "Enter the limit -> ";
    cin >> limit;
    int ans = smallestDivisor(n, arr, limit);
    cout << "The minimum divisor is -> " << ans;
    return 0;
}
