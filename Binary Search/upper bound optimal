#include <bits/stdc++.h>
using namespace std;
// optimal approach
int upperBound(int n, int arr[], int x)
{
    int low = 0, high = n - 1;
    int ans = n;
    while (low <= high)
    {
        int mid = (low + high) / 2;
        if (arr[mid] > x)
        {
            ans = mid;
            // checks whether smaller index is present in left
            high = mid - 1;
        }
        else
        {
            low = mid + 1; // check in the right
        }
    }
    return ans;
}
int main()
{
    int n, t;
    cout << "Enter the size of array -> ";
    cin >> n;
    int arr[n];
    cout << "Enter the elements of the array / sorted order -> ";
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }
    cout << "Enter the target -> ";
    cin >> t;
    int ind = upperBound(n, arr, t);
    cout << "The upper bound is present at the index -> " << ind;
    return 0;
}
