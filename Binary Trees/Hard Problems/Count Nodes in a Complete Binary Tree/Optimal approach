#include <bits/stdc++.h>

// A Complete binary has all filled levels except for the last one and all the nodes in the last level are as left as possible

// We have to find the number of nodes present

// Optimal approach

// T.C. -> O(log N * log N)
// S.C. -> O(log N)

using namespace std;

struct Node
{
    int data;    // value
    Node *l, *r; // left and right child

    // parameterized constructor
    Node(int val)
    {
        data = val;
        l = r = nullptr;
    }
};

void insert(Node *&root, const vector<int> &arr)
{
    if (arr.empty())
    {
        return;
    }

    queue<Node *> q;
    int i = 0;

    if (arr[i] != -1)
    {
        root = new Node(arr[i]);
        q.push(root);
    }

    i++;

    while (!q.empty() && i < arr.size())
    {
        Node *current = q.front();
        q.pop();

        // left child
        if (arr[i] != -1)
        {
            current->l = new Node(arr[i]);
            q.push(current->l);
        }

        i++;

        // right child
        if (i < arr.size() && arr[i] != -1)
        {
            current->r = new Node(arr[i]);
            q.push(current->r);
        }
        i++;
    }
}

int Left(Node *node)
{
    int h = 0;
    while (node)
    {
        h++;
        node = node->l;
    }
    return h;
}

int Right(Node *node)
{
    int h = 0;

    while (node)
    {
        h++;
        node = node->r;
    }
    return h;
}

int countNodes(Node *root)
{

    if (root == nullptr)
    {
        return 0;
    }

    int lh = Left(root);
    int rh = Right(root);

    if (lh == rh)
    {
        return (1 << lh) - 1;
    }

    return 1 + countNodes(root->l) + countNodes(root->r);
}

int main()
{
    Node *root = nullptr;
    int n;

    cout << "Enter the number of nodes (including nulls as -1) -> ";
    cin >> n;

    vector<int> arr(n);
    for (int i = 0; i < n; ++i)
    {
        cout << "Enter value for node " << (i + 1) << " -> ";
        cin >> arr[i];
    }

    insert(root, arr);

    int ans = countNodes(root);

    cout << "Total number of nodes in the Complete Binary Tree is ->  " << ans << endl;

    return 0;
}
