#include <bits/stdc++.h>

// We have to find the level in Binary Tree which has the longest distance between its leftmost and rightmost node

// Optimal approach

// T.C. -> O(N)
// S.C. -> O(N)

using namespace std;

struct Node
{
    int data;    // value
    Node *l, *r; // left and right child

    // parameterized constructor
    Node(int val)
    {
        data = val;
        l = r = nullptr;
    }
};

void insert(Node *&root, const vector<int> &arr)
{
    if (arr.empty())
    {
        return;
    }

    queue<Node *> q;
    int i = 0;

    if (arr[i] != -1)
    {
        root = new Node(arr[i]);
        q.push(root);
    }

    i++;

    while (!q.empty() && i < arr.size())
    {
        Node *current = q.front();
        q.pop();

        // left child
        if (arr[i] != -1)
        {
            current->l = new Node(arr[i]);
            q.push(current->l);
        }

        i++;

        // right child
        if (i < arr.size() && arr[i] != -1)
        {
            current->r = new Node(arr[i]);
            q.push(current->r);
        }
        i++;
    }
}

int widthOfBinaryTree(Node *root)
{
    // base case
    if (!root)
    {
        return 0;
    }

    int ans = 0;

    queue<pair<Node *, int>> q; // node and its position in the current level

    q.push({root, 0});

    while (!q.empty())
    {
        int size = q.size(); // number of nodes at the current level

        int first = q.front().second; // position of the front node
        int last = first;             // initialize last as the first node's position

        for (int i = 0; i < size; i++)
        {
            Node *node = q.front().first;
            int cur_pos = q.front().second; // current position
            q.pop();

            if (i == size - 1)
            {
                last = cur_pos; // update last with the position of the rightmost node
            }

            // assigning position to the left child if it exists
            if (node->l)
            {
                q.push({node->l, cur_pos * 2 + 1});
            }

            // assigning position to the right child if it exists
            if (node->r)
            {
                q.push({node->r, cur_pos * 2 + 2});
            }
        }

        ans = max(ans, last - first + 1); // update maximum width
    }

    return ans;
}

int main()
{
    Node *root = nullptr;
    int n;

    cout << "Enter the number of nodes (including nulls as -1) -> ";
    cin >> n;

    vector<int> arr(n);
    for (int i = 0; i < n; ++i)
    {
        cout << "Enter value for node " << (i + 1) << " -> ";
        cin >> arr[i];
    }

    insert(root, arr);

    int ans = widthOfBinaryTree(root);

    cout << "Maximum width is -> " << ans << endl;

    return 0;
}
