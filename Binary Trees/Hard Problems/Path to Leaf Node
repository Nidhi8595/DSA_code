#include <bits/stdc++.h>

using namespace std;

// We have to find the path to a given leaf node from the root of the Binary Tree

// Optimal approach

// T.C. -> O(N)
// S.C. -> O(N)

struct Node
{
    int data; // value

    Node *l; // left child

    Node *r; // right child

    // parameterized constructor
    Node(int val)
    {
        data = val;
        l = r = nullptr;
    }
};

void insert(Node *&root, const vector<int> &arr)
{
    if (arr.empty())
    {
        return;
    }

    queue<Node *> q;
    int i = 0;

    if (arr[i] != -1)
    {
        root = new Node(arr[i]);
        q.push(root);
    }

    i++;

    while (!q.empty() && i < arr.size())
    {
        Node *current = q.front();
        q.pop();

        // left child
        if (arr[i] != -1)
        {
            current->l = new Node(arr[i]);
            q.push(current->l);
        }

        i++;

        // right cild
        if (i < arr.size() && arr[i] != -1)
        {
            current->r = new Node(arr[i]);
            q.push(current->r);
        }
        i++;
    }
}

bool getPath(Node *root, vector<int> &arr, int x)
{

    if (root == nullptr)
    {
        return false;
    }

    arr.push_back(root->data);

    if (root->data == x)
    {
        return true;
    }

    if (getPath(root->l, arr, x) || getPath(root->r, arr, x))
    {
        return true;
    }

    arr.pop_back(); // since this is not the path

    return false;
}

vector<int> Path(Node *root, int T)
{

    vector<int> arr; // to store path

    if (root == nullptr)
    {
        return arr;
    }

    getPath(root, arr, T);

    return arr;
}

int main()
{

    Node *root = nullptr;
    int n;

    cout << "Enter the number of nodes (including nulls as -1) -> ";
    cin >> n;

    vector<int> arr(n);
    for (int i = 0; i < n; ++i)
    {
        cout << "Enter value for node " << (i + 1) << " -> ";
        cin >> arr[i];
    }

    insert(root, arr);

    int T;
    cout << "Enter the Target Node -> ";
    cin >> T;

    vector<int> path = Path(root, T);

    cout << "Path from root to leaf node " << T << " is :- ";
    for (int i = 0; i < path.size(); ++i)
    {
        cout << path[i];
        if (i < path.size() - 1)
        {
            cout << " -> ";
        }
    }

    return 0;
}
