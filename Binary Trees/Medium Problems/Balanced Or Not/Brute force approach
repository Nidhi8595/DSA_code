
#include <bits/stdc++.h>

using namespace std;

// Checking whether the Binary Tree is Balanced or not

// Brute force

// T.C. -> O(N^2)
// S.C. -> O(1)

struct Node
{
    int data; // value

    Node *l; // left child

    Node *r; // right child

    // parameterized constructor
    Node(int val)
    {
        data = val;
        l = r = nullptr;
    }
};

void insert(Node *&root, const vector<int> &arr)
{
    if (arr.empty())
    {
        return;
    }

    queue<Node *> q;
    int i = 0;

    if (arr[i] != -1)
    {
        root = new Node(arr[i]);
        q.push(root);
    }

    i++;

    while (!q.empty() && i < arr.size())
    {
        Node *current = q.front();
        q.pop();

        // left child
        if (arr[i] != -1)
        {
            current->l = new Node(arr[i]);
            q.push(current->l);
        }

        i++;

        // right cild
        if (i < arr.size() && arr[i] != -1)
        {
            current->r = new Node(arr[i]);
            q.push(current->r);
        }
        i++;
    }
}

int maxDepth(Node *root)
{
    if (root == NULL)
    {
        return 0;
    }

    // left subtree
    int lh = maxDepth(root->l);

    // right subtree
    int rh = maxDepth(root->r);

    // add 1 for current node since we are performing it for each respective level
    return 1 + max(lh, rh);
}

bool isBalanced(Node *root)
{
    if (root == nullptr)
    {
        return true;
    }

    int leftHeight = maxDepth(root->l);

    int rightHeight = maxDepth(root->r);

    // Absolute difference in heights of left & right subtrees <= 1 or not
    if (abs(leftHeight - rightHeight) <= 1 && isBalanced(root->l) && isBalanced(root->r))
    {
        return true;
    }
    else
    {
        return false;
    }
}

int main()
{

    Node *root = nullptr;
    int n;

    cout << "Enter the number of nodes (including nulls as -1) -> ";
    cin >> n;

    vector<int> arr(n);
    for (int i = 0; i < n; ++i)
    {
        cout << "Enter value for node " << (i + 1) << " -> ";
        cin >> arr[i];
    }

    insert(root, arr);

    int ans = isBalanced(root);

    if (ans)
    {
        cout << "This is a Balanced Binary Tree" << endl;
    }
    else
    {
        cout << "Not a Balanced Binary Tree" << endl;
    }

    return 0;
}
