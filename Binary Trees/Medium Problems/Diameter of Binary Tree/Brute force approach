#include <bits/stdc++.h>

using namespace std;

// Diamter of a binary tree :- the longest horizontal path bw two nodes of a tree ( may or may not include root node)

// Brute force approach

// T.C. -> O(N^2)
// S.C. -> O(1)

struct Node
{
    int data; // value

    Node *l; // left child

    Node *r; // right child

    // parameterized constructor
    Node(int val)
    {
        data = val;
        l = r = nullptr;
    }
};

void insert(Node *&root, const vector<int> &arr)
{
    if (arr.empty())
    {
        return;
    }

    queue<Node *> q;
    int i = 0;

    if (arr[i] != -1)
    {
        root = new Node(arr[i]);
        q.push(root);
    }

    i++;

    while (!q.empty() && i < arr.size())
    {
        Node *current = q.front();
        q.pop();

        // left child
        if (arr[i] != -1)
        {
            current->l = new Node(arr[i]);
            q.push(current->l);
        }

        i++;

        // right cild
        if (i < arr.size() && arr[i] != -1)
        {
            current->r = new Node(arr[i]);
            q.push(current->r);
        }
        i++;
    }
}

class Solution
{
public:
    // Global
    int diameter = 0;

    int Height(Node *node)
    {
        if (node == nullptr)
        {
            return 0;
        }

        // left subtree
        int lh = Height(node->l);
        int rh = Height(node->r);

        diameter = max(diameter, lh + rh);

        return 1 + max(lh, rh);
    }

    int Diameter(Node *root)
    {
        Height(root);

        return diameter;
    }
};

int main()
{

    Node *root = nullptr;
    int n;

    cout << "Enter the number of nodes (including nulls as -1) -> ";
    cin >> n;

    vector<int> arr(n);
    for (int i = 0; i < n; ++i)
    {
        cout << "Enter value for node " << (i + 1) << " -> ";
        cin >> arr[i];
    }

    insert(root, arr);

    Solution obj;

    int ans = obj.Diameter(root);

    cout << "Diameter of Binary Tree is :- " << ans << endl;

    return 0;
}
