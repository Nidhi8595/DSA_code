#include <bits/stdc++.h>

using namespace std;

// Checking whether two Binary Trees are identical

// T.C. -> O(N1 + N2)
// S.C. -> O(1)

struct Node
{
    int data; // value

    Node *l; // left child

    Node *r; // right child

    // parameterized constructor
    Node(int val)
    {
        data = val;
        l = r = nullptr;
    }
};

void insert(Node *&root, int value)
{
    if (root == nullptr)
    {
        root = new Node(value);
        return;
    }

    queue<Node *> q;
    q.push(root);

    while (!q.empty())
    {
        Node *current = q.front();
        q.pop();

        if (current->l == nullptr)
        {
            current->l = new Node(value);
            return;
        }

        else
        {
            q.push(current->l);
        }

        if (current->r == nullptr)
        {
            current->r = new Node(value);
            return;
        }

        else
        {
            q.push(current->r);
        }
    }
}

bool Identical(Node *node1, Node *node2)
{
    if (node1 == nullptr && node2 == nullptr)
    {
        return true;
    }

    // Both should be null to be identicals
    if (node1 == nullptr || node2 == nullptr)
    {
        return false;
    }

    // matching root nodes values, and recursively performing it on each node of left & right subtrees
    if ((node1->data == node2->data) && Identical(node1->l, node2->l) && Identical(node1->r, node2->r))
    {
        return true;
    }

    return false;
}

int main()
{

    // Node1
    Node *root1 = new Node(9);
    root1->l = new Node(8);
    root1->r = new Node(7);
    root1->l->l = new Node(6);

    // Node2
    Node *root2 = new Node(9);
    root2->l = new Node(8);
    root2->r = new Node(7);
    root2->l->l = new Node(6);

    // Node *root = nullptr;
    // int n, value;

    // cout << "Enter the number of nodes to insert -> ";
    // cin >> n;

    // for (int i = 0; i < n; ++i)
    // {
    //     cout << "Enter the value for Node " << (i + 1) << " -> ";
    //     cin >> value;
    //     insert(root, value);
    // }

    int ans = Identical(root1, root2);

    if (ans)
    {
        cout << "Both trees are idenctical" << endl;
    }
    else
    {
        cout << "Not identical" << endl;
    }

    return 0;
}
