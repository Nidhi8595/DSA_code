
#include <bits/stdc++.h>

using namespace std;

// Height of a binary tree

// T.C. -> O(N)
// S.C. -> O(N)

struct Node
{
    int data; // value

    Node *l; // left child

    Node *r; // right child

    // parameterized constructor
    Node(int val)
    {
        data = val;
        l = r = nullptr;
    }
};

void insert(Node *&root, int value)
{
    if (root == nullptr)
    {
        root = new Node(value);
        return;
    }

    queue<Node *> q;
    q.push(root);

    while (!q.empty())
    {
        Node *current = q.front();
        q.pop();

        if (current->l == nullptr)
        {
            current->l = new Node(value);
            return;
        }

        else
        {
            q.push(current->l);
        }

        if (current->r == nullptr)
        {
            current->r = new Node(value);
            return;
        }

        else
        {
            q.push(current->r);
        }
    }
}

int maxDepth(Node *root)
{
    if (root == NULL)
    {
        return 0;
    }

    // left subtree
    int lh = maxDepth(root->l);

    // right subtree
    int rh = maxDepth(root->r);

    // add 1 for current node since we are performing it for each respective level
    return 1 + max(lh, rh);
}

int main()
{

    Node *root = nullptr;
    int n, value;

    cout << "Enter the number of nodes to insert -> ";
    cin >> n;

    for (int i = 0; i < n; ++i)
    {
        cout << "Enter the value for Node " << (i + 1) << " -> ";
        cin >> value;
        insert(root, value);
    }

    int ans = maxDepth(root);

    cout << "Height( Maximum depth) of Binary Tree is :- " << ans << endl;

    return 0;
}
