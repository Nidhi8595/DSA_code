#include <bits/stdc++.h>
using namespace std;

// deleting the Tail Node in a Doubly Linked List

class Node
{
public:
    int data;   // to store value
    Node *next; /* since we will store the address of next node
    thats why we are declaring a pointer of datatype "Node" */
    Node *back; // to store pointer of previous node
public:
    /* now we will define constructor to create objects of
    datatype "Node" */
    Node(int data1, Node *next1, Node *back1)
    {
        data = data1;
        next = next1;
        back = back1;
    }

    Node(int data1) // second constructor
    {
        data = data1;
        next = nullptr;
        back = nullptr;
    }
};

Node *convert(int n, int arr[])
{
    Node *head = new Node(arr[0]); // creating first node
    Node *prev = head;             // initially will point to head pointer
    for (int i = 1; i < n; i++)
    {
        Node *temp = new Node(arr[i], nullptr, prev); // creating other nodes
        prev->next = temp;
        prev = temp;
    }
    return head; /* returning the address of first
    node of Doubly Linked list we have created */
}

void print(Node *temp)
{
    cout << "The elements in the Doubly Linked List are -> ";
    while (temp != NULL)
    {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

Node *deleteTail(Node *head)
{
    if (head == nullptr || head->next == nullptr) // empty or single element
    {
        return nullptr;
    }
    // for more than one elements
    Node *temp = head;                  // to traverse
    while (temp->next->next != nullptr) // check from the second last element
    {
        temp = temp->next;
    }
    Node *tail = temp->next; // Tail Node
    tail->back = nullptr;    // removing from list
    delete tail;             /* deallocation of memory for the node present at the
              address stored in last second node ( i.e. delete last node) */
    temp->next = nullptr;    /* so now the second last Node will
       become last node and will store Null pointer */
    return head;             // returning the address of updated linked list
}

// Alternatively, using back pointer
// Node *deleteTail(Node *head)
// {
//     if (head == nullptr || head->next == nullptr) // empty or single element
//     {
//         return nullptr;
//     }
//     // for more than one elements
//     Node *temp = head;            // to traverse
//     while (temp->next != nullptr) // traverse till last node
//     {
//         temp = temp->next;
//     }
//     Node *tail = temp->back; /* using the back
//     pointer to create last second node as Tail */
//     tail->next = nullptr;
//     temp->back = nullptr; // removing from List
//     delete temp;
//     return head;
// }

int main()
{
    int n;
    cout << "Enter the no. of elements -> ";
    cin >> n;
    int arr[n];
    cout << "Enter the elements -> ";
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }
    Node *head = convert(n, arr); // address of Linked List

    print(head);
    cout << "After deleting Tail :- " << endl;
    head = deleteTail(head);
    print(head);
}
