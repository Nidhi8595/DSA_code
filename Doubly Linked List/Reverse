#include <bits/stdc++.h>
using namespace std;

// Reversing a Doubly Linked List
// Brute force -> using Stack
// T.C. -> O(2N) -> two traversals
// S.C. -> O(N)

class Node
{
public:
    int data;   // to store value
    Node *next; /* since we will store the address of next node
    thats why we are declaring a pointer of datatype "Node" */
    Node *back; // to store pointer of previous node
public:
    /* now we will define constructor to create objects of
    datatype "Node" */
    Node(int data1, Node *next1, Node *back1)
    {
        data = data1;
        next = next1;
        back = back1;
    }

    Node(int data1) // second constructor
    {
        data = data1;
        next = nullptr;
        back = nullptr;
    }
};

Node *convert(int n, int arr[])
{
    Node *head = new Node(arr[0]); // creating first node
    Node *prev = head;             // initially will point to head pointer
    for (int i = 1; i < n; i++)
    {
        Node *temp = new Node(arr[i], nullptr, prev); // creating other nodes
        prev->next = temp;
        prev = temp;
    }
    return head; /* returning the address of first
    node of Doubly Linked list we have created */
}

void print(Node *temp)
{
    cout << "The elements in the Doubly Linked List are -> ";
    while (temp != NULL)
    {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

Node *reverseDL(Node *head)
{
    if (head == nullptr || head->next == nullptr)
    { // empty or single element
        return head;
    }

    stack<int> st;     // LIFO
    
    Node *temp = head; // to traverse
    while (temp != nullptr)
    {
        st.push(temp->data);
        temp = temp->next;
    }

    temp = head; // second iteration to insert elements back into DLL starting from top of stack
    while (temp != nullptr)
    {
        temp->data = st.top();
        st.pop();
        temp = temp->next;
    }

    return head; // updated Doubly Linked List
}

int main()
{
    int n;
    cout << "Enter the no. of elements -> ";
    cin >> n;
    int arr[n];
    cout << "Enter the elements -> ";
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }
    Node *head = convert(n, arr); // address of Linked List

    print(head);
    head = reverseDL(head);
    cout << "After reversing:-" << endl;
    print(head);
    return 0;
}
