#include <iostream>
#include <unordered_map>
#include <vector>
using namespace std;

// Given an array arr[] and an integer target.
// You have to find numbers of pairs in array arr[]
// which sums up to given target.

// Examples:

// Input: arr[] = [1, 5, 7, -1, 5], target = 6
// Output: 3
// Explanation: Pairs with sum 6 are
// (1, 5), (7, -1) and (1, 5).

// T.C. -> O(N)

int countPairs(vector<int> &arr, int target)
{
    unordered_map<int, int> freq; // To store frequency of elements
    int count = 0;

    for (int num : arr)
    {
        // Find the complement
        int complement = target - num;

        // If complement exists in map, add its frequency to count
        if (freq.find(complement) != freq.end())
        {
            count += freq[complement];
        }

        // Add current number to the frequency map
        freq[num]++;
    }

    return count;
}

int main()
{
    vector<int> arr = {1, 5, 7, -1, 5};
    int target = 6;
    cout << "Count of pairs with sum " << target << ": " << countPairs(arr, target) << endl;
    return 0;
}
