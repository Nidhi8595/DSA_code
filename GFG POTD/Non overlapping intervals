#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>
using namespace std;

// Given a 2D array intervals[][] of representing intervals where
// intervals [i] = [starti, endi ]. Return the minimum number of intervals
//  you need to remove to make the rest of the intervals non-overlapping.

// Examples:

// Input: intervals[][] = [[1, 2], [2, 3], [3, 4], [1, 3]]
// Output: 1
// Explanation: [1, 3] can be removed and the
// rest of the intervals are non-overlapping.

// Function to calculate the minimum number of intervals to remove
int minRemoval(vector<vector<int>> &intervals)
{
    // Step 1: Sort intervals based on their end times
    sort(intervals.begin(), intervals.end(), [](const vector<int> &a, const vector<int> &b)
         { return a[1] < b[1]; });

    // Step 2: Initialize variables
    int last_end_time = INT_MIN; // Last end time of the selected interval
    int remove_count = 0;        // Count of intervals to remove

    // Step 3: Iterate through the intervals
    for (const auto &interval : intervals)
    {
        if (interval[0] < last_end_time)
        {
            // Overlapping interval: Increment the count
            remove_count++;
        }
        else
        {
            // Non-overlapping interval: Update the end time
            last_end_time = interval[1];
        }
    }

    // Step 4: Return the minimum number of removals
    return remove_count;
}

int main()
{
    int n;
    vector<vector<int>> intervals;

    cout << "Enter the number of intervals: ";
    cin >> n;

    cout << "Enter the intervals as pairs of [start, end]:" << endl;
    intervals.resize(n, vector<int>(2));
    for (int i = 0; i < n; i++)
    {
        cin >> intervals[i][0] >> intervals[i][1];
    }

    int result = minRemoval(intervals);

    cout << "Minimum number of intervals to remove: " << result << endl;

    return 0;
}
