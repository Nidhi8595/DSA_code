#include <iostream>
#include <vector>
using namespace std;

// Given a 2D integer matrix mat[][] of size n x m,
// where every row and column is sorted in increasing order
// and a number x, the task is to find whether element x is present in the matrix.

// Examples:

// Input: mat[][] = [[3, 30, 38],
//                  [20, 52, 54],
//                 [35, 60, 69]],
// x = 62

// Output: false
// Explanation: 62 is not present in the matrix, so output is false.

// T.C. -> O(n+m)

// Function to search for a given number in a row-column sorted matrix.
bool matSearch(vector<vector<int>> &mat, int x)
{
    int n = mat.size();    // Number of rows
    int m = mat[0].size(); // Number of columns

    int i = 0, j = m - 1; // Start from the top-right corner

    while (i < n && j >= 0)
    {
        if (mat[i][j] == x)
        {
            return true; // Element found
        }
        if (mat[i][j] > x)
        {
            j--; // Move left
        }
        else
        {
            i++; // Move down
        }
    }

    return false; // Element not found
}

int main()
{
    int n, m, x;
    cout << "Enter the number of rows and columns in the matrix: ";
    cin >> n >> m;

    vector<vector<int>> mat(n, vector<int>(m));

    cout << "Enter the matrix elements (row-wise sorted):\n";
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            cin >> mat[i][j];
        }
    }

    cout << "Enter the number to search: ";
    cin >> x;

    if (matSearch(mat, x))
    {
        cout << "Number found in the matrix.\n";
    }
    else
    {
        cout << "Number not found in the matrix.\n";
    }

    return 0;
}
