#include <iostream>
#include <vector>
using namespace std;

// Given a strictly sorted 2D matrix mat[][] of size n x m and a number x.
// Find whether the number x is present in the matrix or not.
// Note: In a strictly sorted matrix, each row is sorted in strictly increasing order,
// and the first element of the ith row (i!=0) is greater
// than the last element of the (i-1)th row.

// Examples:

// Input: mat[][] = [[1, 5, 9],
//                  [14, 20, 21],
//                 [30, 34, 43]],
//   x = 14

// Output: true
// Explanation: 14 is present in the matrix, so output is true.

// T.C. -> O(log(n*m))

// Function to search a given number in a row-column sorted matrix.
bool searchMatrix(vector<vector<int>> &mat, int x)
{
    int n = mat.size();    // Number of rows
    int m = mat[0].size(); // Number of columns

    int low = 0, high = n * m - 1;

    while (low <= high)
    {
        int mid = (low + high) / 2;
        int row = mid / m; // Row index in the matrix
        int col = mid % m; // Column index in the matrix

        if (mat[row][col] == x)
        {
            return true; // Element found
        }
        else if (mat[row][col] < x)
        {
            low = mid + 1; // Search in the right half
        }
        else
        {
            high = mid - 1; // Search in the left half
        }
    }

    return false; // Element not found
}

int main()
{
    int n, m, x;
    cout << "Enter the number of rows and columns in the matrix: ";
    cin >> n >> m;

    vector<vector<int>> mat(n, vector<int>(m));

    cout << "Enter the matrix elements (row-wise sorted):\n";
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < m; j++)
        {
            cin >> mat[i][j];
        }
    }

    cout << "Enter the number to search: ";
    cin >> x;

    if (searchMatrix(mat, x))
    {
        cout << "Number found in the matrix.\n";
    }
    else
    {
        cout << "Number not found in the matrix.\n";
    }

    return 0;
}
