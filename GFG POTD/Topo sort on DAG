#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    void solve(vector<vector<int>>& adj, vector<bool>& visited, int src, stack<int>& st) {
        visited[src] = true;

        for (auto nbr : adj[src]) {
            if (!visited[nbr]) {
                solve(adj, visited, nbr, st);
            }
        }

        st.push(src); // All descendants processed, push to stack
    }

    vector<int> topoSort(int V, vector<vector<int>>& edges) {
        vector<vector<int>> adj(V);
        vector<bool> visited(V, false);
        vector<int> ans;

        // Build adjacency list
        for (auto& edge : edges) {
            adj[edge[0]].push_back(edge[1]);
        }

        // DFS on unvisited nodes
        stack<int> st;
        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                solve(adj, visited, i, st);
            }
        }

        // Stack holds the topological order
        while (!st.empty()) {
            ans.push_back(st.top());
            st.pop();
        }

        return ans;
    }
};

int main() {
    Solution sol;

    // Example: Directed Acyclic Graph
    int V = 6;
    vector<vector<int>> edges = {
        {5, 2},
        {5, 0},
        {4, 0},
        {4, 1},
        {2, 3},
        {3, 1}
    };

    vector<int> result = sol.topoSort(V, edges);

    cout << "Topological Sort: ";
    for (int node : result) {
        cout << node << " ";
    }
    cout << endl;

    return 0;
}
