#include <bits/stdc++.h>

using namespace std;

vector<vector<int>> AdjacencyMat(int n, int m)
{

    vector<vector<int>> adj(n, vector<int>(n, 0));

    for (int i = 0; i < m; i++)
    {
        int u, v;
        cout << "Enter the nodes for edge " << i + 1 << " -> " << endl;
        cin >> u >> v;

        // Convert to 0-based indexing
        u--;
        v--;

        adj[u][v] = 1;
        adj[v][u] = 1; // for undirected graph
    }

    return adj;
}

void dfs(int node, vector<vector<int>> &adjLs, vector<int> &vis)
{
    vis[node] = 1;
    for (auto it : adjLs[node])
    {
        if (!vis[it])
        {
            dfs(it, adjLs, vis);
        }
    }
}

int numProvinces(vector<vector<int>> adj, int n)
{

    vector<vector<int>> adjLs(n);

    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            if (adj[i][j] == 1 && i != j)
            {
                adjLs[i].push_back(j);
                adjLs[j].push_back(i);
            }
        }
    }

    vector<int> vis(n, 0);

    int cnt = 0;

    for (int i = 0; i < n; i++)
    {
        if (!vis[i])
        {
            cnt++;
            dfs(i, adjLs, vis);
        }
    }
    return cnt;
}

int main()
{
    int n, m;

    cout << "Enter the number of nodes & edges -> " << endl;
    cin >> n >> m;

    vector<vector<int>> adjMat = AdjacencyMat(n, m);

    int ans = numProvinces(adjMat, n);

    cout << "The number of provinces are -> " << ans << endl;

    return 0;
}
