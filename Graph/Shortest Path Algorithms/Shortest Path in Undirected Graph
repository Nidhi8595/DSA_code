#include <bits/stdc++.h>
using namespace std;

vector<vector<int>> AdjacencyList(int n, int m)
{
    vector<vector<int>> adj(n);

    for (int i = 0; i < m; i++)
    {
        int u, v;
        cout << "Enter the nodes for edge " << i + 1 << " -> " << endl;
        cin >> u >> v;

        adj[u].push_back(v);
        adj[v].push_back(u);
    }

    return adj;
}

void printGraph(const vector<vector<int>> &adjList, int n)
{
    cout << "Adjacency List :- " << endl;
    for (int i = 0; i < n; i++)
    {
        cout << i << ": ";
        for (auto node : adjList[i])
        {
            cout << node << " ";
        }
        cout << endl;
    }
}

vector<int> shortestPath(const vector<vector<int>> &adj, int N, int src)
{
    // A dist array of size N initialized with a large number to
    // indicate that initially all the nodes are untraversed.
    vector<int> dist(N, 1e9);

    dist[src] = 0;
    queue<int> q;
    q.push(src);

    while (!q.empty())
    {
        int node = q.front();
        q.pop();

        for (auto neighbor : adj[node])
        {
            if (dist[node] + 1 < dist[neighbor])
            {
                dist[neighbor] = 1 + dist[node];
                q.push(neighbor);
            }
        }
    }

    return dist;
}

int main()
{
    int n, m;

    cout << "Enter the number of nodes & edges -> " << endl;
    cin >> n >> m;

    vector<vector<int>> adjList = AdjacencyList(n, m);
    printGraph(adjList, n);

    // Source node is 0 (0-based indexing)
    vector<int> ans = shortestPath(adjList, n, 0);

    cout << "Shortest distances from source 0: " << endl;
    for (int i = 0; i < ans.size(); i++)
    {
        if (ans[i] == 1e9)
        {
            cout << -1 << " "; // Unreachable nodes
        }
        else
        {
            cout << ans[i] << " ";
        }
    }

    return 0;
}
