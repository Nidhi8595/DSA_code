#include <bits/stdc++.h>
using namespace std;

// Function to create an adjacency list with weights
vector<vector<pair<int, int>>> AdjacencyList(int n, int m)
{
    vector<vector<pair<int, int>>> adj(n);

    for (int i = 0; i < m; i++)
    {
        int u, v, w;
        cout << "Enter the nodes (u, v) and weight for edge " << i + 1 << " -> " << endl;
        cin >> u >> v >> w;

        adj[u].push_back({v, w});
    }

    return adj;
}

void printGraph(const vector<vector<pair<int, int>>> &adjList, int n)
{
    cout << "Adjacency List with weights: " << endl;
    for (int i = 0; i < n; i++)
    {
        cout << i << ": ";
        for (auto node : adjList[i])
        {
            cout << "(" << node.first << ", " << node.second << ") ";
        }
        cout << endl;
    }
    cout << endl;
}

vector<int> shortestPath(const vector<vector<pair<int, int>>> &adj, int N, int src)
{
    vector<int> dist(N, 1e9); // Initialize distances to infinity

    dist[src] = 0;

    queue<int> q;
    vector<int> indegree(N, 0);

    // Calculate indegree for each node
    for (int i = 0; i < N; i++)
    {
        for (auto neighbor : adj[i])
        {
            indegree[neighbor.first]++;
        }
    }

    // Push nodes with indegree 0 (starting points)
    for (int i = 0; i < N; i++)
    {
        if (indegree[i] == 0)
        {
            q.push(i);
        }
    }

    // Perform BFS with topological sorting
    while (!q.empty())
    {
        int node = q.front();
        q.pop();

        for (auto neighbor : adj[node])
        {
            int v = neighbor.first;
            int weight = neighbor.second;

            if (dist[node] + weight < dist[v])
            {
                dist[v] = dist[node] + weight;
            }

            indegree[v]--;

            if (indegree[v] == 0)
            {
                q.push(v);
            }
        }
    }

    return dist;
}

int main()
{
    int n, m;

    cout << "Enter the number of nodes & edges -> " << endl;
    cin >> n >> m;

    vector<vector<pair<int, int>>> adjList = AdjacencyList(n, m);
    printGraph(adjList, n);

    vector<int> ans = shortestPath(adjList, n, 0);

    cout << "Shortest distances from source 0: " << endl;

    for (int i = 0; i < ans.size(); i++)
    {
        if (ans[i] == 1e9)
        {
            cout << i << " -> " << "Unreachable" << endl;
        }
        else
        {
            cout << i << " -> " << ans[i] << endl;
        }
    }

    return 0;
}
