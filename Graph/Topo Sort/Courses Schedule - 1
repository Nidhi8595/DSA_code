#include <bits/stdc++.h>
using namespace std;

// using Kahn's algo

vector<vector<int>> AdjacencyList(int n, int m)
{
    vector<vector<int>> adj(n);

    for (int i = 0; i < m; i++)
    {
        int u, v;
        cout << "Enter the courses for pair " << i + 1 << " (u having pre-quisite v): ";
        cin >> u >> v;

        // Validating course numbers
        if (u < 0 || u >= n || v < 0 || v >= n)
        {
            cout << "Invalid course numbers. Please enter numbers in the range [0, " << n - 1 << "]." << endl;
            i--;
            continue;
        }

        adj[v].push_back(u);
    }

    return adj;
}

void printGraph(const vector<vector<int>> &adjList)
{
    cout << "Adjacency List: " << endl;
    for (size_t i = 0; i < adjList.size(); i++)
    {
        cout << i << ": ";
        for (auto node : adjList[i])
        {
            cout << node << " ";
        }
        cout << endl;
    }
}

// topological sorting
vector<int> findOrder(int V, const vector<vector<int>> &adj)
{
    vector<int> indegree(V, 0);

    for (int i = 0; i < V; i++)
    {
        for (auto it : adj[i])
        {
            indegree[it]++;
        }
    }

    queue<int> q;
    for (int i = 0; i < V; i++)
    {
        if (indegree[i] == 0)
        {
            q.push(i);
        }
    }

    vector<int> topo;
    while (!q.empty())
    {
        int node = q.front();
        q.pop();
        topo.push_back(node);

        for (auto it : adj[node])
        {
            indegree[it]--;
            if (indegree[it] == 0)
            {
                q.push(it);
            }
        }
    }

    if (topo.size() != V)
    {
        return {}; // Cycle
    }
    return topo;
}

int main()
{
    int n, m;

    cout << "Enter the number of courses and pairs: ";
    cin >> n >> m;

    if (n <= 0 || m < 0)
    {
        cout << "Invalid input for number of courses or pairs." << endl;
        return 1; // Exit with error
    }

    vector<vector<int>> adjList = AdjacencyList(n, m);
    printGraph(adjList);

    vector<int> ans = findOrder(n, adjList);

    if (ans.empty())
    {
        cout << "There is no valid order (cycle detected)." << endl;
    }
    else
    {
        cout << "Course order: ";
        for (auto node : ans)
        {
            cout << node << " ";
        }
        cout << endl;
    }

    return 0;
}
