
#include <bits/stdc++.h>

using namespace std;

vector<vector<int>> AdjacencyList(int n, int m)
{
    vector<vector<int>> adj(n + 1);

    for (int i = 0; i < m; i++)
    {
        int u, v;
        cout << "Enter the nodes for edge " << i + 1 << " -> " << endl;
        cin >> u >> v;

        adj[u].push_back(v);
    }

    return adj;
}

void printGraph(const vector<vector<int>> &adjList, int n)
{
    cout << "Adjacency List :- " << endl;
    for (int i = 1; i <= n; i++)
    {
        cout << i << ": ";
        for (auto node : adjList[i])
        {
            cout << node << " ";
        }
        cout << endl;
    }
}

bool isCyclic(int V, vector<vector<int>> &adj)
{
    vector<int> inDegree(V + 1, 0);

    for (int u = 1; u <= V; u++)
    {
        for (auto v : adj[u])
        {
            inDegree[v]++;
        }
    }

    queue<int> q;
    for (int i = 1; i <= V; i++)
    {
        if (inDegree[i] == 0)
        {
            q.push(i);
        }
    }

    int count = 0;
    while (!q.empty())
    {
        int node = q.front();
        q.pop();
        count++;

        for (auto it : adj[node])
        {
            inDegree[it]--;
            if (inDegree[it] == 0)
            {
                q.push(it);
            }
        }
    }

    return (count != V);
}

int main()
{
    int n, m;

    cout << "Enter the number of nodes & edges -> " << endl;
    cin >> n >> m;

    vector<vector<int>> adjList = AdjacencyList(n, m);

    printGraph(adjList, n);

    bool ans = isCyclic(n, adjList);

    if (ans)
        cout << "True" << endl; // Cycle exists
    else
        cout << "False" << endl; // No cycle

    return 0;
}
