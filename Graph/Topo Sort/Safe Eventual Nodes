#include <bits/stdc++.h>
using namespace std;

// Using DFS to detect cycles

vector<vector<int>> AdjacencyList(int n, int m)
{
    vector<vector<int>> adj(n + 1); // Using 1-based indexing

    for (int i = 0; i < m; i++)
    {
        int u, v;
        cout << "Enter the nodes for edge " << i + 1 << " -> " << endl;
        cin >> u >> v;

        adj[u].push_back(v);
    }

    return adj;
}

void printGraph(const vector<vector<int>> &adjList, int n)
{
    cout << "Adjacency List :- " << endl;
    for (int i = 0; i < n; i++)
    {
        cout << i << ": ";
        for (auto node : adjList[i])
        {
            cout << node << " ";
        }
        cout << endl;
    }
}

bool dfsCheck(int node, const vector<vector<int>> &adj, vector<int> &vis, vector<int> &pathVis, vector<int> &check)
{
    vis[node] = 1;
    pathVis[node] = 1;
    check[node] = 0;

    // Adjacents
    for (auto it : adj[node])
    {
        if (!vis[it])
        {
            if (dfsCheck(it, adj, vis, pathVis, check) == true)
            {
                check[node] = 0;
                return true;
            }
        }
        else if (pathVis[it])
        {
            check[node] = 0;
            return true;
        }
    }

    // No cycles detected till here
    check[node] = 1;   // Safe
    pathVis[node] = 0; // Mark as unvisited for the new path
    return false;
}

vector<int> eventualSafeNodes(int V, const vector<vector<int>> &adj)
{
    vector<int> vis(V, 0);     // To check whether a node is visited before
    vector<int> pathVis(V, 0); // To keep track of nodes visited in the current path
    vector<int> check(V, 0);   // To check for cycles

    vector<int> safeNodes;
    for (int i = 0; i < V; i++)
    {
        if (!vis[i])
        {
            dfsCheck(i, adj, vis, pathVis, check);
        }
    }

    for (int i = 0; i < V; i++)
    {
        if (check[i] == 1)
        {
            safeNodes.push_back(i);
        }
    }

    return safeNodes;
}

int main()
{
    int n, m;

    cout << "Enter the number of nodes and edges :- ";
    cin >> n >> m;

    vector<vector<int>> adjList = AdjacencyList(n, m);

    printGraph(adjList, n);

    vector<int> safeNodes = eventualSafeNodes(n, adjList);

    cout << "Safe nodes are :- " << endl;

    for (auto node : safeNodes)
    {
        cout << node << " ";
    }
    cout << endl;

    return 0;
}
