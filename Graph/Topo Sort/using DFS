#include <bits/stdc++.h>
using namespace std;

// T.C. -> O(N + 2M)
// S.C. -> O(2N)

// using DFS

vector<vector<int>> AdjacencyList(int n, int m)
{
    vector<vector<int>> adj(n + 1);

    for (int i = 0; i < m; i++)
    {
        int u, v;
        cout << "Enter the nodes for edge " << i + 1 << " -> " << endl;
        cin >> u >> v;

        adj[u].push_back(v);
    }

    return adj;
}

void printGraph(const vector<vector<int>> &adjList, int n)
{
    cout << "Adjacency List :- " << endl;
    for (int i = 1; i <= n; i++)
    {
        cout << i << ": ";
        for (auto node : adjList[i])
        {
            cout << node << " ";
        }
        cout << endl;
    }
}

void dfs(int node, int vis[], stack<int> &st,  vector<vector<int>> adj)
{
    vis[node] = 1;
    for (auto it : adj[node])
    {
        if (!vis[it])
        {
            dfs(it, vis, st, adj);
        }
    }
    st.push(node);
}

vector<int> topoSort(int V,  vector<vector<int>> adj)
{
    int vis[V] = {0};
    stack<int> st;

    for (int i = 0; i < V; i++)
    {
        if (!vis[i])
        {
            dfs(i, vis, st, adj);
        }
    }

    vector<int> ans;
    while (!st.empty())
    {
        ans.push_back(st.top());
        st.pop();
    }
    return ans;
}

int main()
{
    int n, m;

    cout << "Enter the number of nodes & edges -> " << endl;
    cin >> n >> m;

    vector<vector<int>> adjList = AdjacencyList(n, m);
    printGraph(adjList, n);

    vector<int> ans = topoSort(n, adjList);

	for (auto node : ans) {
		cout << node << " ";
	}
	cout << endl;

	return 0;
}
