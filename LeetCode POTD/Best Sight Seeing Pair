#include <iostream>
#include <vector>
#include <algorithm>
#include <climits>

using namespace std;

// You are given an integer array values where values[i] represents
// the value of the ith sightseeing spot.
// Two sightseeing spots i and j have a distance j - i between them.

// The score of a pair (i < j) of sightseeing spots is values[i] + values[j] + i - j:
// the sum of the values of the sightseeing spots, minus the distance between them.

// Return the maximum score of a pair of sightseeing spots.

// Input: values = [8,1,5,2,6]
// Output: 11
// Explanation: i = 0, j = 2,
// values[i] + values[j] + i - j = 8 + 5 + 0 - 2 = 11

// T.C. -> O(N)

int maxScoreSightseeingPair(vector<int> &values)
{
    int maxLeft = values[0]; // Initialize maxLeft with the first element
    int maxScore = INT_MIN;  // Initialize maxScore to the smallest possible value

    for (int j = 1; j < values.size(); j++)
    {
        // Calculate the score for the current index j
        maxScore = max(maxScore, maxLeft + values[j] - j);

        // Update maxLeft for the next iteration
        maxLeft = max(maxLeft, values[j] + j);
    }

    return maxScore;
}

int main()
{

    vector<int> values = {8, 1, 5, 2, 6};
    cout << "Maximum score: " << maxScoreSightseeingPair(values) << endl;

    return 0;
}
