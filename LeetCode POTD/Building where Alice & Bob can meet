#include <bits/stdc++.h>
using namespace std;

// You are given a 0-indexed array heights of positive integers, where heights[i] represents the height of the ith building.

// If a person is in building i, they can move to any other building j if and only if i < j and heights[i] < heights[j].

// You are also given another array queries where queries[i] = [ai, bi]. On the ith query, Alice is in building ai while Bob is in building bi.

// Return an array ans where ans[i] is the index of the leftmost building where Alice and Bob can meet on the ith query.
// If Alice and Bob cannot move to a common building on query i, set ans[i] to -1.

// Example 1:

// Input: heights = [6,4,8,5,2,7], queries = [[0,1],[0,3],[2,4],[3,4],[2,2]]
// Output: [2,5,-1,5,2]

// Explanation: In the first query, Alice and Bob can move to building 2
// since heights[0] < heights[2] and heights[1] < heights[2].
// In the second query, Alice and Bob can move to building 5
//  since heights[0] < heights[5] and heights[3] < heights[5].
// In the third query, Alice cannot meet Bob
// since Alice cannot move to any other building.
// In the fourth query, Alice and Bob can move to building 5
// since heights[3] < heights[5] and heights[4] < heights[5].
// In the fifth query, Alice and Bob are already in the same building.
// For ans[i] != -1, It can be shown that ans[i] is the
// leftmost building where Alice and Bob can meet.
// For ans[i] == -1, It can be shown that there is
//  no building where Alice and Bob can meet.

// Time Complexity: O(n + q log q)
// Space Complexity: O(n + q)

vector<int> leftmostBuildingQueries(vector<int> &heights, vector<vector<int>> &queries)
{
    int n = heights.size();
    int q = queries.size();
    vector<int> res(q, -1);
    vector<vector<pair<int, int>>> qs(n);                                 // To store queries for each building index
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<>> pq; // Min-heap for processing queries

    // Step 1: Process queries and group them by their `maxi` index
    for (int i = 0; i < q; i++)
    {
        int a = queries[i][0], b = queries[i][1];
        int mini = min(a, b), maxi = max(a, b);

        if (mini == maxi || heights[maxi] > heights[mini])
        {
            res[i] = maxi;
        }
        else
        {
            qs[maxi].emplace_back(max(heights[mini], heights[maxi]), i);
        }
    }

    // Step 2: Traverse the buildings and resolve the remaining queries
    for (int i = 0; i < n; i++)
    {
        // Resolve all queries waiting for a height less than `heights[i]`
        while (!pq.empty() && pq.top().first < heights[i])
        {
            res[pq.top().second] = i;
            pq.pop();
        }

        // Add the current building's queries to the priority queue
        for (auto &ele : qs[i])
        {
            pq.push(ele);
        }
    }

    return res;
}

int main()
{
    int n, q;
    cout << "Enter the number of buildings: ";
    cin >> n;

    vector<int> heights(n);
    cout << "Enter the heights of the buildings: ";
    for (int i = 0; i < n; i++)
    {
        cin >> heights[i];
    }

    cout << "Enter the number of queries: ";
    cin >> q;

    vector<vector<int>> queries(q, vector<int>(2));
    cout << "Enter the queries (a b):" << endl;
    for (int i = 0; i < q; i++)
    {
        cin >> queries[i][0] >> queries[i][1];
    }

    vector<int> result = leftmostBuildingQueries(heights, queries);

    cout << "Results for each query:" << endl;
    for (int i = 0; i < q; i++)
    {
        cout << result[i] << endl;
    }

    return 0;
}
