#include <iostream>
#include <string>
#include <cmath>
using namespace std;

class Solution {
public:
    long long numberOfPowerfulInt(long long start, long long finish, int limit, string s) {
        string start_ = to_string(start - 1);
        string finish_ = to_string(finish);
        return calculate(finish_, s, limit) - calculate(start_, s, limit);
    }

private:
    long long calculate(string x, string s, int limit) {
        if (x.length() < s.length()) {
            return 0;
        }
        if (x.length() == s.length()) {
            return x >= s ? 1 : 0;
        }

        string suffix = x.substr(x.length() - s.length(), s.length());
        long long count = 0;
        int preLen = x.length() - s.length();

        for (int i = 0; i < preLen; i++) {
            int digit = x[i] - '0';
            if (digit > limit) {
                count += (long long)pow(limit + 1, preLen - i);
                return count;
            }
            count += (long long)digit * (long long)pow(limit + 1, preLen - 1 - i);
            if (digit < limit) break;
        }

        if (x.substr(0, preLen) <= string(preLen, limit + '0') && suffix >= s) {
            count++;
        }

        return count;
    }
};

int main() {
    Solution sol;
    
    // Example test
    long long start = 1;
    long long finish = 1000;
    int limit = 1;
    string s = "23";

    long long result = sol.numberOfPowerfulInt(start, finish, limit, s);
    cout << "Number of powerful integers: " << result << endl;

    return 0;
}
