#include <iostream>
#include <vector>
#include <queue>
#include <climits>

using namespace std;

// Given the root of a binary tree, return an array of the
// largest value in each row of the tree (0-indexed).

// Example 1:

// Input: root = [1,3,2,5,3,null,9]
// Output: [1,3,9]

// T.C. -> O(N)
// S.C. -> O(N)

// Definition of a TreeNode
struct TreeNode
{
    int val;
    TreeNode *left;
    TreeNode *right;

    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

// Function to find the largest values in each level
vector<int> largestValues(TreeNode *root)
{
    vector<int> result;
    if (!root)
        return result; // Edge case: empty tree

    queue<TreeNode *> q;
    q.push(root);

    while (!q.empty())
    {
        int levelSize = q.size(); // Number of nodes at the current level
        int maxValue = INT_MIN;   // Initialize max value for the level

        for (int i = 0; i < levelSize; ++i)
        {
            TreeNode *node = q.front();
            q.pop();

            maxValue = max(maxValue, node->val); // Update max value for the level

            // Add child nodes to the queue for the next level
            if (node->left)
                q.push(node->left);
            if (node->right)
                q.push(node->right);
        }

        result.push_back(maxValue); // Store the max value of the current level
    }

    return result;
}

// Helper function to create a tree (for testing purposes)
TreeNode *createTestTree()
{
    TreeNode *root = new TreeNode(1);
    root->left = new TreeNode(3);
    root->right = new TreeNode(2);
    root->left->left = new TreeNode(5);
    root->left->right = new TreeNode(3);
    root->right->right = new TreeNode(9);
    return root;
}

// Driver code
int main()
{
    TreeNode *root = createTestTree();
    vector<int> result = largestValues(root);

    cout << "Largest values in each row: ";
    for (int val : result)
    {
        cout << val << " ";
    }

    return 0;
}
