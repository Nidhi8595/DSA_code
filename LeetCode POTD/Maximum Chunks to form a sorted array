#include <iostream>
#include <vector>
#include <algorithm>

// You are given an integer array arr of length n
//  that represents a permutation of the integers
//   in the range [0, n - 1].

// We split arr into some number of chunks (i.e., partitions),
//  and individually sort each chunk.
//  After concatenating them, the result should equal the sorted array.

// Return the largest number of chunks
// we can make to sort the array.

// Example 1:

// Input: arr = [4,3,2,1,0]
// Output: 1
// Explanation:
// Splitting into two or more chunks will not
// return the required result.
// For example, splitting into [4, 3], [2, 1, 0]
// will result in [3, 4, 0, 1, 2], which isn't sorted.

using namespace std;

int maxChunksToSorted(vector<int> &arr)
{
    int max_so_far = 0; // Tracks the maximum value encountered so far
    int chunks = 0;     // Counts the number of valid chunks

    for (int i = 0; i < arr.size(); i++)
    {
        max_so_far = max(max_so_far, arr[i]);

        // If max_so_far equals the current index, a new chunk is identified
        if (max_so_far == i)
        {
            chunks++;
        }
    }

    return chunks;
}

int main()
{
    vector<int> arr = {4, 3, 2, 1, 0};
    cout << "Maximum number of chunks: " << maxChunksToSorted(arr) << endl;

    return 0;
}
