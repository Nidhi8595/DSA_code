#include <bits/stdc++.h>
using namespace std;

// You are given a 0-indexed 2D integer array of events where events[i] = [startTimei, endTimei, valuei].
// The ith event starts at startTimei and ends at endTimei, and if you attend this event, you will receive a value of valuei.
// You can choose at most two non-overlapping events to attend such that the sum of their values is maximized.

// Return this maximum sum.

// Note that the start time and end time is inclusive: that is,
// you cannot attend two events where one of them starts and the other ends at the same time.
// More specifically, if you attend an event with end time t, the next event must start at or after t + 1.

// Input: events = [[1,3,2],[4,5,2],[2,4,3]]
// Output: 4
// Explanation: Choose the green events, 0 and 1 for a sum of 2 + 2 = 4.

// T.C. -> O(N \log N)
// S.C. -> O(N)

// Function to calculate the maximum sum of values of at most two non-overlapping events

int maxTwoEvents(vector<vector<int>> &events)
{
    int n = events.size();

    // Sorting the events by their start time
    sort(events.begin(), events.end(), [](const vector<int> &a, const vector<int> &b)
         { return a[0] < b[0]; });

    vector<int> suffixMax(n);            // storing the maximum values for index
    suffixMax[n - 1] = events[n - 1][2]; // initially the value of last event

    for (int i = n - 2; i >= 0; --i)
    {
        suffixMax[i] = max(events[i][2], suffixMax[i + 1]);
    }

    int maxSum = 0;

    for (int i = 0; i < n; ++i)
    {
        // finding the next non-overlapping event
        int l = i + 1, r = n - 1, nextEventIndex = -1;

        while (l <= r)
        {
            int mid = l + (r - l) / 2;
            if (events[mid][0] > events[i][1])
            {
                nextEventIndex = mid;
                r = mid - 1;
            }
            else
            {
                l = mid + 1;
            }
        }

        // Updating maxSum for current event
        if (nextEventIndex != -1)
        {
            maxSum = max(maxSum, events[i][2] + suffixMax[nextEventIndex]);
        }
        maxSum = max(maxSum, events[i][2]);
    }

    return maxSum;
}

int main()
{
    int n;
    cout << "Enter the number of events -> ";
    cin >> n;

    vector<vector<int>> events(n, vector<int>(3));

    cout << "Enter the events in the format [startTime, endTime, value] :-\n";
    for (int i = 0; i < n; ++i)
    {
        cout << "Event " << i + 1 << " -> ";
        cin >> events[i][0] >> events[i][1] >> events[i][2];
    }

    int result = maxTwoEvents(events);
    cout << "The maximum sum of values of at most two non-overlapping events is -> " << result << endl;

    return 0;
}
