#include <iostream>
#include <vector>
#include <unordered_map>
#include <unordered_set>
#include <queue>

using namespace std;

// There exist two undirected trees with n and m nodes, numbered from 0 to n - 1 and from 0 to m - 1, respectively.
// You are given two 2D integer arrays edges1 and edges2 of lengths n - 1 and m - 1, respectively,
// where edges1[i] = [ai, bi] indicates that there is an edge between nodes ai and bi in the first tree
// and edges2[i] = [ui, vi] indicates that there is an edge between nodes ui and vi in the second tree.

// You must connect one node from the first tree with another node from the second tree with an edge.

// Return the minimum possible diameter of the resulting tree.

// The diameter of a tree is the length of the longest path between any two nodes in the tree.

// Example 1:

// Input: edges1 = [[0,1],[0,2],[0,3]], edges2 = [[0,1]]

// Output: 3

// Explanation:

// We can obtain a tree of diameter 3 by connecting node 0 from the first tree with any node from the second tree.

// T.C. ->O(N)
// S.c. -> O(N)

// Helper function to calculate the diameter of a graph
int diameter(unordered_map<int, vector<int>> &adj, int n)
{
    // Step 1: Find the farthest node from any arbitrary node (e.g., node 0)
    vector<bool> visited(n, false);
    queue<int> q;
    q.push(0);
    visited[0] = true;
    int last = 0;

    while (!q.empty())
    {
        int size = q.size();
        for (int i = 0; i < size; ++i)
        {
            last = q.front();
            q.pop();
            visited[last] = true;
            for (int neighbor : adj[last])
            {
                if (!visited[neighbor])
                {
                    q.push(neighbor);
                }
            }
        }
    }

    // Step 2: Find the farthest node from `last` and count the hops (diameter)
    q.push(last);
    vector<bool> vis(n, false);
    vis[last] = true;
    int hops = 0;

    while (!q.empty())
    {
        int size = q.size();
        for (int i = 0; i < size; ++i)
        {
            int curr = q.front();
            q.pop();
            vis[curr] = true;
            for (int neighbor : adj[curr])
            {
                if (!vis[neighbor])
                {
                    q.push(neighbor);
                }
            }
        }
        hops += 1; // Increment hops for each level
    }

    return hops - 1; // Diameter = total levels - 1
}

// Function to calculate the diameter of a graph represented by edges
int findDiameter(vector<vector<int>> &edges)
{
    if (edges.empty())
        return 0; // No edges, diameter is 0

    unordered_map<int, vector<int>> adj; // Adjacency list
    unordered_set<int> nodes;            // Unique set of nodes

    for (auto &edge : edges)
    {
        adj[edge[0]].push_back(edge[1]);
        adj[edge[1]].push_back(edge[0]);
        nodes.insert(edge[0]);
        nodes.insert(edge[1]);
    }

    return diameter(adj, nodes.size());
}

// Main function to find the minimum diameter after merging two graphs
int minimumDiameterAfterMerge(vector<vector<int>> &edges1, vector<vector<int>> &edges2)
{
    int dia1 = findDiameter(edges1); // Diameter of first graph
    int dia2 = findDiameter(edges2); // Diameter of second graph

    int radius1 = (dia1 + 1) / 2; // Radius of first graph
    int radius2 = (dia2 + 1) / 2; // Radius of second graph

    // Calculate the minimum diameter after merging
    int sum = 1 + radius1 + radius2;
    return max(sum, max(dia1, dia2));
}

// Driver code
int main()
{
    vector<vector<int>> edges1 = {{0, 1}, {1, 2}};
    vector<vector<int>> edges2 = {{3, 4}};

    int result = minimumDiameterAfterMerge(edges1, edges2);

    cout << "Minimum Diameter After Merge: " << result << endl;

    return 0;
}
