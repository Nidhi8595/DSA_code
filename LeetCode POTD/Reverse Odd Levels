#include <iostream>
#include <queue>
#include <vector>
using namespace std;

// Given the root of a perfect binary tree, reverse the node values at each odd level of the tree.

// For example, suppose the node values at level 3 are [2,1,3,4,7,11,29,18], then it should become [18,29,11,7,4,3,1,2].
// Return the root of the reversed tree.

// A binary tree is perfect if all parent nodes have two children and all leaves are on the same level.

// The level of a node is the number of edges along the path between it and the root node.

// Example 1:

// Input: root = [2,3,5,8,13,21,34]
// Output: [2,5,3,8,13,21,34]
// Explanation:
// The tree has only one odd level.
// The nodes at level 1 are 3, 5 respectively, which are reversed and become 5, 3.

// Definition for a binary tree node.
struct TreeNode
{
    int val;
    TreeNode *left;
    TreeNode *right;
    TreeNode(int x) : val(x), left(NULL), right(NULL) {}
};

// Function to reverse the values at odd levels of the binary tree.
TreeNode *reverseOddLevels(TreeNode *root)
{
    if (!root)
        return root;

    // BFS queue
    queue<TreeNode *> q;
    q.push(root);
    int level = 0;

    while (!q.empty())
    {
        int size = q.size();
        vector<TreeNode *> nodes;

        // Process the nodes at the current level
        for (int i = 0; i < size; i++)
        {
            TreeNode *node = q.front();
            q.pop();
            nodes.push_back(node);

            // Add the left and right children to the queue for the next level
            if (node->left)
                q.push(node->left);
            if (node->right)
                q.push(node->right);
        }

        // Reverse values at odd levels
        if (level % 2 == 1)
        {
            int n = nodes.size();
            for (int i = 0; i < n / 2; i++)
            {
                swap(nodes[i]->val, nodes[n - i - 1]->val);
            }
        }

        level++;
    }

    return root;
}

// Function to print the tree in level order
void printLevelOrder(TreeNode *root)
{
    if (!root)
        return;

    queue<TreeNode *> q;
    q.push(root);
    while (!q.empty())
    {
        TreeNode *node = q.front();
        q.pop();
        cout << node->val << " ";
        if (node->left)
            q.push(node->left);
        if (node->right)
            q.push(node->right);
    }
    cout << endl;
}

// Helper function to create a binary tree
TreeNode *createTree()
{
    TreeNode *root = new TreeNode(1);
    root->left = new TreeNode(2);
    root->right = new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);
    root->right->left = new TreeNode(6);
    root->right->right = new TreeNode(7);
    return root;
}

int main()
{
    // Create a sample binary tree
    TreeNode *root = createTree();

    cout << "Original tree (level order): ";
    printLevelOrder(root);

    // Reverse the values at odd levels
    root = reverseOddLevels(root);

    cout << "Tree after reversing odd levels (level order): ";
    printLevelOrder(root);

    return 0;
}
