#include <iostream>
#include <vector>
#include <unordered_map>
#include <string>

using namespace std;

// You are given an integer array nums and an integer target.

// You want to build an expression out of nums by adding one of the symbols
// '+' and '-' before each integer in nums and then concatenate all the integers.

// For example, if nums = [2, 1], you can add a '+' before 2 and
// a '-' before 1 and concatenate them to build the expression "+2-1".

// Return the number of different expressions that you can build, which evaluates to target.

// Example 1:

// Input: nums = [1,1,1,1,1], target = 3
// Output: 5
// Explanation: There are 5 ways to assign symbols to make the sum of nums be target 3.
// -1 + 1 + 1 + 1 + 1 = 3
// +1 - 1 + 1 + 1 + 1 = 3
// +1 + 1 - 1 + 1 + 1 = 3
// +1 + 1 + 1 - 1 + 1 = 3
// +1 + 1 + 1 + 1 - 1 = 3

// T.C. -> O(2^N)

int dfs(vector<int> &nums, int i, int target, unordered_map<string, int> &memo)
{
    // Base case
    if (i == nums.size())
        return target == 0 ? 1 : 0;

    // Memoization key
    string key = to_string(i) + "," + to_string(target);
    if (memo.find(key) != memo.end())
        return memo[key];

    // Recursive cases: Add and Subtract current number
    int add = dfs(nums, i + 1, target - nums[i], memo);
    int subtract = dfs(nums, i + 1, target + nums[i], memo);

    // Store result in memo and return
    memo[key] = add + subtract;
    return memo[key];
}

int findTargetSumWays(vector<int> &nums, int target)
{
    unordered_map<string, int> memo;
    return dfs(nums, 0, target, memo);
}

int main()
{
    vector<int> nums = {1, 1, 1, 1, 1};
    int target = 3;

    int result = findTargetSumWays(nums, target);
    cout << "Number of ways to achieve target: " << result << endl;

    return 0;
}
