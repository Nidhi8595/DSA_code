#include <bits/stdc++.h>
using namespace std;

/* deleting the middle element in the Linked List
If the Length is even, deleting the second one from the
two middle elements
E.g. -> { 1, 2, 3, 4, 5, 6 } ans -> { 1, 2, 3, 5, 6 }

Brute force approach
T.C. -> O(N + N/2)
S.C. -> O(1) */

class Node
{
public:
    int data;   // to store value
    Node *next; /* since we will store the address of next node
    thats why we are declaring a pointer of datatype "Node" */
public:
    /* now we will define constructor to create objects of
    datatype "Node" */
    Node(int data1, Node *next1)
    {
        data = data1;
        next = next1;
    }
    Node(int data1) // second constructor
    {
        data = data1;
        next = nullptr;
    }
};

Node *convert(int n, int arr[])
{
    Node *head = new Node(arr[0]); // creting first node
    Node *move = head;             // initially will point to head pointer
    for (int i = 1; i < n; i++)
    {
        Node *temp = new Node(arr[i]); // creating other nodes
        move->next = temp;             // now move points to new temporary node we have created
        move = temp;                   // or move=move->next;// now move pointer moves to next node
    }
    return head; // returning the address of first node of Linked list we have created
}

void print(Node *temp)
{
    cout << "The elements in the Linked List are -> ";
    while (temp != NULL)
    {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

int length(Node *head)
{
    int cnt = 0;
    Node *temp = head;
    while (temp)
    {
        temp = temp->next;
        cnt++;
    }
    return cnt; // i.e. number of nodes traversed
}

Node *DeleteMid(Node *head)
{
    if (head == nullptr || head->next == nullptr)
    { // empty or single element
        return head;
    }

    int cnt = length(head);
    int n = cnt/2; // we basically need to reach one node
    //  before the middle one for altering the links

    Node *temp = head; // to traverse till mid
    while (temp != nullptr)
    {
        n--; // to keep count

        if(n==0){

            Node* mid = temp->next;
            temp->next = temp->next->next;
            
            free(mid);
            break;
        }
        temp = temp->next;
    }

    return head;
}

int main()
{
    int n;
    cout << "Enter the no. of elements -> ";
    cin >> n;
    int arr[n];
    cout << "Enter the elements -> ";
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }
    Node *head = convert(n, arr);

    print(head);

    cout << "The given Linked List contains " << length(head) << " elements" << endl;

    cout<<"After deleting the middle node -> "<<endl;
    Node* ans = DeleteMid(head);
    print(ans);

    return 0;
}
