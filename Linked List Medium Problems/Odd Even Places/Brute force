#include <bits/stdc++.h>
using namespace std;

// arrange the values at odd places and even places together respectively in the Linked List

// Brute force approach :- using a data structure
// traversing two times
// T.C. -> O(2N)
// S.C. -> O(N)

class Node
{
public:
    int data;   // to store value
    Node *next; /* since we will store the address of next node
    thats why we are declaring a pointer of datatype "Node" */
public:
    /* now we will define constructor to create objects of
    datatype "Node" */
    Node(int data1, Node *next1)
    {
        data = data1;
        next = next1;
    }
    Node(int data1) // second constructor
    {
        data = data1;
        next = nullptr;
    }
};

Node *convert(int n, int arr[])
{
    Node *head = new Node(arr[0]); // creting first node
    Node *move = head;             // initially will point to head pointer
    for (int i = 1; i < n; i++)
    {
        Node *temp = new Node(arr[i]); // creating other nodes
        move->next = temp;             // now move points to new temporary node we have created
        move = temp;                   // or move=move->next;// now move pointer moves to next node
    }
    return head; // returning the address of first node of Linked list we have created
}

void print(Node *temp)
{
    cout << "The elements in the Linked List are -> ";
    while (temp != NULL)
    {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
    cout<<endl;
}

Node *oddevenplaces(Node *head)
{
    vector<int> arr;
    Node *temp = head; // to traverse
    while (temp != nullptr && temp->next != nullptr)
    {
        arr.push_back(temp->data);
        temp = temp->next->next; // traversing all odd places
    }
    if (temp)
    {   // in case the last node is not traversed
        // due to temp->next!=nullptr condition
        arr.push_back(temp->data);
    }

    temp = head->next; // starting from 2 node now
    while (temp != nullptr && temp->next != nullptr)
    {
        arr.push_back(temp->data);
        temp = temp->next->next; // traversing all even places
    }
    if (temp)
    {
        arr.push_back(temp->data);
    }

    temp = head;
    int i = 0;
    while (temp != nullptr)
    {
        temp->data = arr[i];
        i++;
        temp = temp->next;
    }

    return head;
}

int main()
{
    int n;
    cout << "Enter the no. of elements -> ";
    cin >> n;
    int arr[n];
    cout << "Enter the elements -> ";
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }
    Node *head = convert(n, arr); // address of Linked List
    print(head);

    cout << "After segregating the values present at odd & even places :-" << endl;
    head = oddevenplaces(head);
    print(head);
}
