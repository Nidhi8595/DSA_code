#include <bits/stdc++.h>
using namespace std;

// checking whether the given Linked List is palindrome
// E.g. -> 1,2,3,2,1
// Brute force - using Stack

// T.C. -> O(2N)
// S.C. -> O(N)

class Node
{
public:
    int data;   // to store value
    Node *next; /* since we will store the address of next node
    thats why we are declaring a pointer of datatype "Node" */
public:
    /* now we will define constructor to create objects of class Node */
    Node(int data1, Node *next1)
    {
        data = data1;
        next = next1;
    }
    Node(int data1) // second constructor
    {
        data = data1;
        next = nullptr;
    }
};

Node *convert(int n, int arr[])
{
    Node *head = new Node(arr[0]); // creting first node
    Node *move = head;             // initially will point to head pointer
    for (int i = 1; i < n; i++)
    {
        Node *temp = new Node(arr[i]); // creating other nodes
        move->next = temp;             // now move points to new temporary node we have created
        move = temp;                   // or move=move->next;// now move pointer moves to next node
    }
    return head; // returning the address of first node of Linked list we have created
}

void print(Node *temp)
{
    cout << "The elements in the Linked List are -> ";
    while (temp != NULL)
    {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

bool Palindrome(Node *head)
{
    stack<int> st;
    Node *temp = head;

    while (temp != nullptr)
    {
        st.push(temp->data);
        temp = temp->next;
    }
    temp = head;
    while (temp != nullptr)
    {
        if (temp->data != st.top()) /* since now
        the values we will access from stack will be
        the reverse order of given Linked List */
        {
            return false; // not palindrome
        }
        st.pop();

        temp = temp->next;
    }

    return true; // palindrome
}

int main()
{
    int n;
    cout << "Enter the no. of elements -> ";
    cin >> n;
    int arr[n];
    cout << "Enter the elements -> ";
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }
    Node *head = convert(n, arr); // address of Linked List

    print(head);

    if (Palindrome(head))
    {
        cout << "Given linked list is palindrome" << endl;
    }
    else
    {
        cout << "Given linked list is not palindrome" << endl;
    }

    return 0;
}
