#include <bits/stdc++.h>
using namespace std;

// checking whether the given Linked List is palindrome
// E.g. -> 1,2,3,2,1
// Optimal approach

// T.C. -> O(2N)
// S.C. -> O(1)

class Node
{
public:
    int data;   // to store value
    Node *next; /* since we will store the address of next node
    thats why we are declaring a pointer of datatype "Node" */
public:
    /* now we will define constructor to create objects of class Node */
    Node(int data1, Node *next1)
    {
        data = data1;
        next = next1;
    }
    Node(int data1) // second constructor
    {
        data = data1;
        next = nullptr;
    }
};

Node *convert(int n, int arr[])
{
    Node *head = new Node(arr[0]); // creting first node
    Node *move = head;             // initially will point to head pointer
    for (int i = 1; i < n; i++)
    {
        Node *temp = new Node(arr[i]); // creating other nodes
        move->next = temp;             // now move points to new temporary node we have created
        move = temp;                   // or move=move->next;// now move pointer moves to next node
    }
    return head; // returning the address of first node of Linked list we have created
}

void print(Node *temp)
{
    cout << "The elements in the Linked List are -> ";
    while (temp != NULL)
    {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

Node *reverse(Node *head) // using recursion
{
    if (head == nullptr || head->next == nullptr)
    {
        return head;
    }

    Node *newHead = reverse(head->next);

    Node *front = head->next;
    front->next = head;

    head->next = nullptr;

    return newHead;
}

bool Palindrome(Node *head)
{
    if (head == nullptr || head->next == nullptr)
    {
        return true;
    }

    // find the middle node using Tortoise & Hare Algo
    Node *slow = head;
    Node *fast = head;
    while (fast->next != nullptr && fast->next->next != nullptr)
    {
        slow = slow->next;       // one step at a time
        fast = fast->next->next; // two steps at a time
    }
    Node *newHead = reverse(slow->next);

    // comparing values
    Node *i = head;    // first half
    Node *j = newHead; // starting of reversed second half
    while (j != nullptr)
    {
        if (i->data != j->data) /* since the
       values in first half and the reversed
       second half must be equal */
        {
            reverse(newHead); // back to original
            return false;     // not palindrome
        }
        i = i->next;
        j = j->next;
    }

    reverse(newHead); // back to original

    return true; // palindrome
}

int main()
{
    int n;
    cout << "Enter the no. of elements -> ";
    cin >> n;
    int arr[n];
    cout << "Enter the elements -> ";
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }
    Node *head = convert(n, arr); // address of Linked List

    print(head);

    if (Palindrome(head))
    {
        cout << "Given linked list is palindrome" << endl;
    }
    else
    {
        cout << "Given linked list is not palindrome" << endl;
    }

    return 0;
}
