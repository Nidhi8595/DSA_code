#include <bits/stdc++.h>
using namespace std;

class Node
{
public:
    int data;   // to store value
    Node *next; /* since we will store the address of next node
    thats why we are declaring a pointer of datatype "Node" */
public:
    /* now we will define constructor to create objects of
    datatype "Node" */
    Node(int data1, Node *next1)
    {
        data = data1;
        next = next1;
    }
    Node(int data1) // second constructor
    {
        data = data1;
        next = nullptr;
    }
};

Node *convert(int n, int arr[])
{
    Node *head = new Node(arr[0]); // creting first node
    Node *move = head;             // initially will point to head pointer
    for (int i = 1; i < n; i++)
    {
        Node *temp = new Node(arr[i]); // creating other nodes
        move->next = temp;             // now move points to new temporary node we have created
        move = temp;                   // or move=move->next;// now move pointer moves to next node
    }
    return head; // returning the address of first node of Linked list we have created
}

void print(Node *temp)
{
    cout << "The elements in the Linked List are -> ";
    while (temp != NULL)
    {
        cout << temp->data << " ";
        temp = temp->next;
    }
    cout << endl;
}

Node *insertBefValue(Node *head, int val, int k)
{
    if (head == nullptr)
    {
        cout << "Can't be inserted";
    }
    if (head->data == k) // insert before head node
    {
        Node *temp = new Node(val, head);
        return temp;
    }
    Node *temp = head;
    while (temp->next != nullptr) // traverse till second last since we don't need to visit last node
    {
        if (temp->next->data == k) // i.e. the next Node contains element before which we want to insert
        {
            Node *x = new Node(val);
            x->next = temp->next; // storing address of next Node which was previously stored in temp
            temp->next = x;       // storing pointer of inserted node in temp
            return head;
        }
        temp = temp->next; // keep traversing
    }
    return head;
}

int main()
{
    int n;
    cout << "Enter the no. of elements -> ";
    cin >> n;
    int arr[n];
    cout << "Enter the elements -> ";
    for (int i = 0; i < n; i++)
    {
        cin >> arr[i];
    }
    Node *head = convert(n, arr); // address of Linked List

    print(head);
    int val, k;
    cout << "Enter the value you want to insert and the element before which to be inserted -> ";
    cin >> val >> k;
    cout << "After inserting " << val << " before " << k << " :- " << endl;
    head = insertBefValue(head, val, k);
    print(head);
}
