#include <bits/stdc++.h>
using namespace std;
// brute force
vector<vector<int>> merge(vector<vector<int>> &arr, int n)
{
    sort(arr.begin(), arr.end()); // sorting based on 1st element of each pair
    vector<vector<int>> ans;
    for (int i = 0; i < n; i++)
    {
        int start = arr[i][0];
        int end = arr[i][1];
        if (!ans.empty() && end <= ans.back()[1])
        {
            // if the ans is not empty 'and' end is less than element at 1st index of last pair in ans 
            continue;   // move to next iteration
        }
        for (int j = i + 1; j < n; j++)
        {
            if (arr[j][0] <= end)
            {
                end = max(end, arr[j][1]); // updating to maximum value
            }
            else
            {
                break;
            }
        }
        ans.push_back({start, end});  // inserting large interval possible
    }
    return ans;
}
int main()
{
    int n;
    cout << "Enter the number of intervals -> ";
    cin >> n;
    vector<vector<int>> arr;
    cout << "Enter the pairs of elements -> " << endl;
    for (int i = 0; i < n; i++)    // taking user input for a 2d vector
    {
        vector<int> temp;      // creating a temporary vector
        for (int j = 0; j < 2; j++)
        {
            int val;
            cin >> val;     // inserting elements for each pair
            temp.push_back(val);  
        }
        arr.push_back(temp);   // inserting pair into 2d vector
    }
    vector<vector<int>> ans = merge(arr, n);
    cout << "The merged intervals are -> " << endl;
    for (auto it : ans)
    {
        cout << "[ ";
        for (int j = 0; j < 2; j++)
        {
            cout << it[j] << " ";
        }
        cout << "] ";
    }
    // another way
    // for (auto it : ans)
    // {
    //     cout << "[" << it[0] << ", " << it[1] << "] ";
    // }
    return 0;
}
