#include <bits/stdc++.h>
using namespace std;
// optimal approach
vector<vector<int>> merge(vector<vector<int>> &arr, int n)
{
    sort(arr.begin(), arr.end());    // sorting based on 1st element of each pair
    vector<vector<int>> ans;
    for (int i = 0; i < n; i++)
    {
        if (ans.empty() || arr[i][0] > ans.back()[1])
        {
            // checking if ans is empty 'or' element at 0th index of i'th pair is greater than element at 1st index of last pair in ans
            ans.push_back(arr[i]);
        }
        else
        {
            ans.back()[1] = max(ans.back()[1], arr[i][1]); // updating to maximum value
        }
    }
    return ans;
}
int main()
{
    int n;
    cout << "Enter the number of intervals -> ";
    cin >> n;
    vector<vector<int>> arr;
    cout << "Enter the pairs of elements -> " << endl;
    for (int i = 0; i < n; i++)
    {
        vector<int> temp;  // creating a temporary vector
        for (int j = 0; j < 2; j++)
        {
            int val;
            cin >> val;    // inserting elements for each pair
            temp.push_back(val);
        }
        arr.push_back(temp);  // inserting pair into 2d vector
    }
    vector<vector<int>> ans = merge(arr, n);
    cout << "The merged intervals are -> " << endl;
    for (auto it : ans)
    {
        cout << "[ ";
        for (int j = 0; j < 2; j++)
        {
            cout << it[j] << " ";
        }
        cout << "] ";
    }
    // another way
    // for (auto it : ans)
    // {
    //     cout << "[" << it[0] << ", " << it[1] << "] ";
    // }
    return 0;
}
