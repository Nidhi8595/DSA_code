#include <bits/stdc++.h>
using namespace std;

// In this approach, we care using binary search

// T.C. ->  O(N * M * log M)
// M is the length of largest string
// S.C. -> O(M)

int findMinLength(string arr[], int n)
{
    int min = arr[0].length();
    for (int i = 1; i < n; i++)
        if (arr[i].length() < min)
        {
            min = arr[i].length();
        }
    return (min);
}

bool Prefix(string arr[], int n, string str, int start, int end)
{
    for (int i = 0; i <= n - 1; i++)
    {
        for (int j = start; j <= end; j++)
        {
            if (arr[i][j] != str[j])
            {
                return (false);
            }
        }
    }
    return (true);
}

string commonPrefix(string arr[], int n)
{
    int Minlength = findMinLength(arr, n);
    string prefix; // to store result
    int l = 0, h = Minlength;
    while (l <= h)
    {
        int mid = l + (h - l) / 2; // to avoid overflow
        if (Prefix(arr, n, arr[0], l, mid))
        {
            prefix = prefix + arr[0].substr(l, mid - l + 1);
            l = mid + 1;
        }
        else
        {
            h = mid - 1;
        }
    }
    return (prefix);
}

int main()
{
    int n;
    cout << "Enter the size of array -> ";
    cin >> n;
    string arr[n];
    string s;
    for (int i = 0; i < n; i++)
    {
        cout << "Enter " << i + 1 << "th string -> ";
        cin >> s;
        arr[i] = s;
    }
    string ans = commonPrefix(arr, n);
    if (ans.length())
    {
        cout << "The longest common prefix is -> " << ans;
    }
    else
    {
        cout << "There is no common prefix";
    }
    return 0;
}
