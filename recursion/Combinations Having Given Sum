#include <bits/stdc++.h>

using namespace std;

// We have to find all possible combinations using a given array,
// whose sum will be equal to given target value

// arr -> { 2, 3, 6, 7}, t = 7
// Combinations are :- { 2, 2, 3} , { 7}

//  We can take one element more than one time
// For example, using 2 & 3, sum =  2 + 2 + 3 -> 7
// using 7, sum = 7.

// T.C -> O(2^t*k)
// S.C -> O(k*ans.size())

void Combination(int index, int t, vector<int> &arr, vector<vector<int>> &ans, vector<int> &ds)
{

    if (index == arr.size())
    {

        if (t == 0)
        {
            ans.push_back(ds);
        }
        return;
    }

    // pick :- remains at same index
    if (arr[index] <= t)
    {

        ds.push_back(arr[index]);
        Combination(index, t - arr[index], arr, ans, ds);
        ds.pop_back();
    }

    // don't pick :- move to next index
    Combination(index + 1, t, arr, ans, ds);
}
vector<vector<int>> Sum(vector<int> &elements, int t)
{
    vector<vector<int>> ans; // to store all combinations
    vector<int> ds;          // to store each combination particularly

    Combination(0, t, elements, ans, ds); // starting from index 0
    return ans;
}

int main()
{
    int n, x;
    cout << "Enter the size of array -> ";
    cin >> n;
    vector<int> arr;
    cout << "Enter array elements :- ";
    for (int i = 0; i < n; i++)
    {
        cin >> x;
        arr.push_back(x);
    }

    int t;
    cout << "Enter the Target Sum -> ";
    cin >> t;

    vector<vector<int>> ans = Sum(arr, t);

    cout << "Combinations are :- " << endl;
    for (int i = 0; i < ans.size(); i++)
    {
        for (int j = 0; j < ans[i].size(); j++)
        {
            cout << ans[i][j] << " ";
        }
        cout << endl;
    }
}
